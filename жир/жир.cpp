#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int main() {
	// Сжатый алгоритм
	// В любой момент времени ищем лучший исход
	// Выбор определяется в текущий момент

	// Алгоритм Дейкстры
	/*
	Мы определяем лучшее действие здесь и сейчас, основываясь на действиях прошлого
	
	Жадина - Лучший сосед

	Делаем доп матрицу как буферную матрицу
	Будем запоминать сколько можем собрать
	B[i][j] - хранит оптимально количество для лучшего пути в i-j -ую яйчейку

	Минимальнынй тест надо придумывать. Набор вх данных, который способен сломать код.
	Если придуман тест и алгорит сломан - задача не решается этим алгоритмом
	*/

	/*
	Рюкзак
	Есть n - элементов
	с - стоимость, к - вес
	Есть портфель, который выдержит С кг.
	Надо накидать в портфель вещей, чтобы вес можно было унести и сумма ценности стремилась к макс.
	
	Ломающий тест:
	3  - н
	5 4
	3 3
	3 3 
	6 - С

	                    од
	 Лорд Хаарт

	a - money
	c - мешок
	d - сколько приносит денег мешок монет
	n - деньги, которые надо собрать
	Надо подсчитать сколько дней надо собрать

	а = 100
	100 50
	1000

	Худший вариант = 10 дней
	
	Мультики - тот, который заккачивается раньше всех
	Создам вектор пар    
	*/



}
