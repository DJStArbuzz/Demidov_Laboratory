#include <iostream>
#include <string>

#include "geometry.h"
#include "glut.h"

using namespace std;

const int N = 30;
const int RAZ = 10;

void instruction() {
    cout << "Сначала указываем на массив с фигурами\n";
    cout << "Потом Указываем на номер в массиве\n";    
    cout << "1 - Point, точка на плоскости\n";    
    cout << "2 - Line, прямая\n";    
    cout << "3 - Polygon, многоугольник\n";    
    cout << "4 - Ellipse, эллипс\n";     
    cout << "5 - Circle, круг\n";     
    cout << "6 - Rectangle, прямоугольник\n";    
    cout << "7 - Square, квадрат\n";   
    cout << "8 - Triangle, треугольник\n";
    cout << "-----------------------------\n";
}

void init() {
    glClearColor(0.0, 0.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-N - RAZ, N + RAZ, -N - RAZ, N + RAZ, -1.0, 1.0);
}

void drawGrid() {
    glBegin(GL_QUADS);
    glVertex2f(-N-RAZ, -N - RAZ);
    glVertex2f(-N-RAZ, N-RAZ);
    glVertex2f(N-RAZ, N-RAZ);
    glVertex2f(N - RAZ, -N-RAZ);
    glEnd();

    glColor3f(0.0, 0.0, 0.0);
    glLineWidth(1.0);
    glBegin(GL_LINES);
    for (int i = -N - RAZ; i <= N - RAZ; i++) {
        glVertex2f(i, -N-RAZ);
        glVertex2f(i, N-RAZ);
        glVertex2f(-N-RAZ, i);
        glVertex2f(N-RAZ, i);
    }
    glEnd();
}

void drawAxes() {
    glColor3f(1.0, 0.0, 0.0);
    glLineWidth(4.0);
    glBegin(GL_LINES);
    glVertex2f(-N - RAZ, -RAZ);
    glVertex2f(N - RAZ, -RAZ);
    glVertex2f(-RAZ, -N - RAZ);
    glVertex2f(-RAZ, N - RAZ);
    glEnd();
}

string text = "Hello, World!";

void keyboard(unsigned char key, int x, int y) {
    if (key == 27) { // если нажата клавиша Escape
        exit(0);
    }

    text += key; // добавляем символ к текущему тексту

    glutPostRedisplay(); // перерисовываем экран
}

void drawSVO() {
    glColor3f(0.0, 1.0, 0.0);
    glLineWidth(7.0);
    vector<Point> list = { Point(15.0, 5.0), Point(19.0, 5.0),
        Point(19.0, 19.0), Point(15.0, 19.0), Point(5.0, 19.0),
        Point(10.0, 5.0), Point(15.0, 19.0), Point(0.0, 19.0), Point(0.0, 12.0),
    Point(5.0, 12.0), Point(5.0, 5.0), Point(0.0, 5.0)};
    glBegin(GL_LINES);
    // O
    glVertex2f(list[0].x - RAZ, list[0].y - RAZ);
    glVertex2f(list[1].x - RAZ, list[1].y - RAZ);

    glVertex2f(list[1].x - RAZ, list[1].y - RAZ);
    glVertex2f(list[2].x - RAZ, list[2].y - RAZ);

    glVertex2f(list[2].x - RAZ, list[2].y - RAZ);
    glVertex2f(list[3].x - RAZ, list[3].y - RAZ);

    glVertex2f(list[3].x - RAZ, list[3].y - RAZ);
    glVertex2f(list[0].x - RAZ, list[0].y - RAZ);

    // V
    glVertex2f(list[4].x - RAZ, list[4].y - RAZ);
    glVertex2f(list[5].x - RAZ, list[5].y - RAZ);

    glVertex2f(list[5].x - RAZ, list[5].y - RAZ);
    glVertex2f(list[6].x - RAZ, list[6].y - RAZ);

    // S
    glVertex2f(list[4].x - RAZ, list[4].y - RAZ);
    glVertex2f(list[7].x - RAZ, list[7].y - RAZ);

    glVertex2f(list[7].x - RAZ, list[7].y - RAZ);
    glVertex2f(list[8].x - RAZ, list[8].y - RAZ);

    glVertex2f(list[8].x - RAZ, list[8].y - RAZ);
    glVertex2f(list[9].x - RAZ, list[9].y - RAZ);

    glVertex2f(list[9].x - RAZ, list[9].y - RAZ);
    glVertex2f(list[10].x - RAZ, list[10].y - RAZ);

    glVertex2f(list[10].x - RAZ, list[10].y - RAZ);
    glVertex2f(list[11].x - RAZ, list[11].y - RAZ);

    // Симметрия буквы V относительно точки
    Point tmp4 = list[4], tmp5 = list[5], tmp6 = list[6];
    tmp4.reflect(Point(0.0, 0.0));
    tmp5.reflect(Point(0.0, 0.0));
    tmp6.reflect(Point(0.0, 0.0));

    glVertex2f(tmp4.x - RAZ, tmp4.y - RAZ);
    glVertex2f(tmp5.x - RAZ, tmp5.y - RAZ);

    glVertex2f(tmp5.x - RAZ, tmp5.y - RAZ);
    glVertex2f(tmp6.x - RAZ, tmp6.y - RAZ);

    // Симметрия буквы V относительно прямой
    Point tmp24 = list[4], tmp25 = list[5], tmp26 = list[6];
    tmp24.reflect(Line(Point(0.0, 0.0), Point(20.0, 0.0)));
    tmp25.reflect(Line(Point(0.0, 0.0), Point(20.0, 0.0)));
    tmp26.reflect(Line(Point(0.0, 0.0), Point(20.0, 0.0)));

    glVertex2f(tmp24.x - RAZ, tmp24.y - RAZ);
    glVertex2f(tmp25.x - RAZ, tmp25.y - RAZ);

    glVertex2f(tmp25.x - RAZ, tmp25.y - RAZ);
    glVertex2f(tmp26.x - RAZ, tmp26.y - RAZ);

    // Отрисовка квадрата
    Square sq(Point(-19, 19), Point(-1, 1));
    vector<Point> listSq = sq.getVertices();
    for (int i = 0; i < listSq.size() - 1; i++) {
        glVertex2f(listSq[i].x - RAZ, listSq[i].y - RAZ);
        glVertex2f(listSq[i + 1].x - RAZ, listSq[i + 1].y - RAZ);
        glFlush();
    }
    glVertex2f(listSq[listSq.size() - 1].x - RAZ, listSq[listSq.size() - 1].y - RAZ);
    glVertex2f(listSq[0].x - RAZ, listSq[0].y - RAZ);


    glEnd();   
}

void drawMenu() {
    int tmp = 0;
    for (int i = 1; i <= 5; i += 1) {
        glBegin(GL_QUADS);
        glVertex2f(N - (RAZ - 1),     N - tmp - RAZ * i);
        glVertex2f(N, N - tmp - RAZ * i);
        glVertex2f(N, N - tmp - RAZ * (i + 1));
        glVertex2f(N - (RAZ - 1),     N - tmp - RAZ* (i + 1));
        glEnd();

        glBegin(GL_QUADS);
        glVertex2f(N + 1, N - tmp - RAZ * i);
        glVertex2f(N + RAZ - 1, N - tmp - RAZ * i);
        glVertex2f(N + RAZ - 1, N - tmp - RAZ * (i + 1));
        glVertex2f(N + 1, N - tmp - RAZ * (i + 1));
        glEnd();
        tmp += 2;
    }
}


void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawGrid();
    drawAxes();
    drawSVO();
    drawMenu();

    glColor3f(1.0, 1.0, 1.0);

    // устанавливаем позицию текста
    glRasterPos2f(N - RAZ + 2, N - RAZ - 5);

    // выводим текст
    for (int i = 0; i < text.length(); i++) {
        glutBitmapCharacter(GLUT_BITMAP_8_BY_13, text[i]);
    }

    glFlush();

    glutSwapBuffers();
}

int main(int argc, char** argv) {
    setlocale(LC_ALL, "RUS");
    instruction();
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(1000, 1000);
    glutCreateWindow("Лабораторная работа №10, вариант №1");

    init();

    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);

    glutMainLoop();

    return 0;
}
